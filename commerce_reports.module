<?php

/**
 * Implements hook_menu().
 */
function commerce_reports_menu() {
  $items = array();
  
  $items['admin/commerce/reports'] = array(
    'title' => 'Reports',
    'description' => 'View reports for your store.',
    'access arguments' => array('access commerce reports'), // Inherited by children.
    'page callback' => 'commerce_reports_dashboard',
    'file' => 'commerce_reports.dashboard.inc',
    'weight' => 50,
  );
  
  $items['admin/commerce/reports/dashboard'] = array(
    'title' => 'Dashboard',
    'description' => 'View reports for your store.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'commerce_reports.dashboard.inc',
    'weight' => 0,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function commerce_reports_theme($existing, $type, $theme, $path){
  return array(
    'commerce_reports_dashboard_block' => array(
      'render element' => 'block',
      'template' => 'dashboard-block',
      'path' => drupal_get_path('module', 'commerce_reports') . '/theme',
    ),
    'views_view_table__commerce_reports_sales_overview' => array(
      'base hook' => 'views_view_table',
      'template' => 'views-view-table--commerce-reports-sales-overview',
      'path' => drupal_get_path('module', 'commerce_reports') . '/theme',
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function commerce_reports_block_info() {
  return array(
    'commerce_reports_sales' => array(
      'info' => t('Commerce Reports: Sales statistics'),
    ),
    'commerce_reports_customers' => array(
      'info' => t('Commerce Reports: Customer statistics'),
    ),
  );
}

function commerce_reports_block_view($delta = '') {
  module_load_include('inc', 'commerce_reports', 'commerce_reports.admin');
  
  switch ($delta) {
    case 'commerce_reports_sales':
      return commerce_reports_sales();
    case 'commerce_reports_customers':
      return commerce_reports_customers();
  }
}

/**
 * Implements hook_form_alter().
 */
function commerce_reports_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-commerce-reports-sales-sales') {
    $form['granularity']['#description'] = t('Large daily reports may take a long time to display.');
    $form['state']['#description'] = t('Only orders with selected statuses will be included in the report.');
  }
}

/**
 * Implements hook_permission().
 */
function commerce_reports_permission() {
  return array(
    'access commerce reports' => array(
      'title' => t('Access commerce reports'),
    )
  );
}

/**
 * Implements hook_views_api().
 */
function commerce_reports_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_reports') . '/includes/views',
  );
}

/**
 * Implements hook_date_format_types().
 */
function commerce_reports_date_formats() {
  return array(
    array(
      'commerce_reports' => ('Commerce Reports'),
    )
  );
}

function commerce_reports_currency_format($amount, $currency_code, $convert = TRUE) {
  $currency = commerce_currency_load($currency_code);
  
  if ($convert) {
    $amount = commerce_currency_amount_to_decimal($amount, $currency_code);
  }
  
  $price = number_format(commerce_currency_round(abs($amount), $currency), 0, $currency['decimal_separator'], $currency['thousands_separator']);
  
  // Establish the replacement values to format this price for its currency.
  $replacements = array(
    '@code_before' => $currency['code_placement'] == 'before' ? $currency['code'] : '', 
    '@symbol_before' => $currency['symbol_placement'] == 'before' ? $currency['symbol'] : '', 
    '@price' => $price, 
    '@symbol_after' => $currency['symbol_placement'] == 'after' ? $currency['symbol'] : '', 
    '@code_after' => $currency['code_placement'] == 'after' ? $currency['code'] : '', 
    '@negative' => $amount < 0 ? '-' : '', 
    '@symbol_spacer' => $currency['symbol_spacer'], 
    '@code_spacer' => $currency['code_spacer'],
  );

  return trim(t('@code_before@code_spacer@negative@symbol_before@price@symbol_spacer@symbol_after@code_spacer@code_after', $replacements));
}

<?php

/**
 * @file
 * Tests for commerce tax reporting module.
 */
 
class CommerceReportsTaxCRUDTestCase extends CommerceBaseTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Tax report CRUD',
      'description' => 'Test the tax report CRUD functions.',
      'group' => 'Drupal Commerce',
    );
  }
  
  function setUp() {
    $modules = parent::setUpHelper('all', array('commerce_reports_tax'));
    parent::setUp($modules);

    $this->site_admin = $this->createSiteAdmin();
    cache_clear_all(); // Just in case
  }
  
  function testCommerceReportsTaxCrud() {
    $new_report = commerce_reports_tax_new('', 1);
    $fields = array('title', 'start', 'end', 'order_statuses', 'detailled');
    foreach ($fields as $field) {
      $this->assertNotNull($new_report->{$field}, 'commerce_reports_tax_new() instantiated the ' . check_plain($field) . ' property.');
    }
    
    $return = commerce_reports_tax_save($new_report);
    $this->assertIdentical($return, SAVED_NEW, 'commerce_reports_tax_save() successfully saved the new tax reports.');
    
    $loaded_report = commerce_reports_tax_load($new_report->report_id);
    foreach ($fields as $field) {
      $this->assertEqual($loaded_report->{$field}, $new_report->{$field}, 'The ' . check_plain($field) . ' value loaded by commerce_reports_tax_load() matches the value saved by commerce_reports_tax_save()');
    }
    
    $this->assertTrue($loaded_report->created > 0, 'commerce_reports_tax_save() added a created date to the report');
    $this->assertTrue($loaded_report->changed > 0, 'commerce_reports_tax_save() added a changed date to the report');
    
    $loaded_report->detailled = 1;
    $return = commerce_reports_tax_save($loaded_report);
    $this->assertIdentical($return, SAVED_UPDATED, 'commerce_reports_tax_save() successfully updated the report.');
    
    $saved_reports = array();
    for ($i = 0; $i < 3; $i++) {
      $report = commerce_reports_tax_new($this->randomName());
      commerce_reports_tax_save($report);

      $saved_reports[$report->report_id] = $report->title;
    }
    
    $loaded_reports = commerce_reports_tax_load_multiple(array_keys($saved_reports));
    $this->assertEqual(count($saved_reports), count($loaded_reports), 'commerce_reports_tax_load_multiple() loaded the proper number of the reports.');
    foreach ($loaded_reports as $loaded_report) {
      $this->assertEqual($loaded_report->title, $saved_reports[$loaded_report->report_id], 'commerce_reports_tax_load_multiple() successfully loaded a report.');
    }
    
    $return = commerce_reports_tax_delete($new_report->report_id);
    $this->assertTrue($return, 'commerce_reports_tax_delete() returned TRUE when deleting a report.');
    $deleted_report_load = commerce_reports_tax_load_multiple(array($new_report->report_id), array(), TRUE);
    $this->assertFalse($deleted_report_load, 'commerce_reports_tax_load_multiple() could not load the deleted report.');

    $return = commerce_reports_tax_delete_multiple(array_keys($saved_reports));
    $this->assertTrue($return, 'commerce_reports_tax_delete_multiple() returned TRUE when deleting a report.');
    $deleted_reports_load = commerce_reports_tax_load_multiple(array_keys($saved_reports), array(), TRUE);
    $this->assertFalse($deleted_reports_load, 'commerce_reports_tax_load_multiple() could not load the deleted reports.');
  }
  
}

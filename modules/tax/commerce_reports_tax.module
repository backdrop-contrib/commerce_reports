<?php

/**
 * Implements hook_help().
 */
function commerce_reports_tax_help($path, $arg) {
  switch ($path) {
    case 'admin/commerce/reports/tax':
      return '<p>' . t('Here you can see reports about the tax gathered by your store.') . '</p>';
      
  }
}

/**
 * Implements hook_menu().
 */
function commerce_reports_tax_menu() {
  $items = array();
  
  $items['admin/commerce/config/tax-reports'] = array(
    'title' => 'Tax reports settings',
    'description' => 'Configure tax reports settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_reports_tax_form'),
    'access arguments' => array('configure commerce tax reports'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'commerce_reports_tax.admin.inc',
  );
  
  $items['admin/commerce/reports/tax'] = array(
    'title' => 'Taxes',
    'description' => 'View reporting about your taxes.',
    'page callback' => 'commerce_reports_tax_table',
    'access arguments' => array('access commerce tax reports'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'commerce_reports_tax.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function commerce_reports_tax_menu_alter(&$items) {
  $items['admin/commerce/reports/tax']['title'] = 'Tax';
  $items['admin/commerce/reports/tax']['type'] = MENU_LOCAL_TASK;
  $items['admin/commerce/reports/tax']['weight'] = 50;
  
  if (empty($items['admin/commerce/reports'])) {
    $items['admin/commerce/reports'] = array(
      'title' => 'Reports',
      'description' => 'View reports for your store.',
      'access arguments' => array('access commerce tax reports'),
      'page callback' => 'drupal_goto',
      'page arguments' => array('admin/commerce/reports/tax'),
      'weight' => 50,
    );
  }
}

/**
 * Implements hook_views_api().
 */
function commerce_reports_tax_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'commerce_reports_tax') . '/includes/views',
  );
}


/**
 * Implements hook_permission().
 */
function commerce_reports_tax_permission() {
  return array(
    'access commerce tax reports' => array(
      'title' => t('Access commerce tax reports'),
    ),
    'configure commerce tax reports' => array(
      'title' => t('Configure commerce tax reports'),
    ),
  );
}

/**
 * Returns the order statuses that should be taken into account.
 */
function commerce_reports_tax_order_statuses() {
  return array('pending', 'completed');
}

/**
 * Implements hook_entity_insert().
 */
function commerce_reports_tax_entity_insert($entity, $type) {
  if ($type == 'commerce_order') {
    dpm($entity);
    
    commerce_reports_tax_order_process($entity);
    
    dpm('inserted');
  }
}

/**
 * Implements hook_entity_update().
 */
function commerce_reports_tax_entity_update($entity, $type) {
  if ($type == 'commerce_order') {
    dpm($entity);
    
    commerce_reports_tax_order_process($entity, FALSE);
    
    dpm('updated');
  }
}

/**
 * Generate previous tax information.
 */
function commerce_reports_tax_generate() {
  $batch = array(
    'title' => t('Generating tax report'),
    'operations' => array(
      array('_commerce_reports_tax_generate', array()),
    ),
    'finished' => '_commerce_reports_tax_finished',
    'file' => drupal_get_path('module', 'commerce_reports_tax') . '/commerce_reports_tax.batch.inc',
  );
  
  batch_set($batch);
}

function commerce_reports_tax_order_process($order, $insert = TRUE) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_data = $wrapper->commerce_order_total->data->value();
  
  $applied_taxes = array();
  
  $base_price = 0;

  // Loop through all the components of this order, to retrieve all applies tax rates and 
  // to determine the base price of the order.
  foreach ($order_data['components'] as $component) {
    if (!empty($component['price']['data']['tax_rate'])) {
      // If this component contains a tax rate, process and store.
      $rate = $component['price']['data']['tax_rate'];

      // For each applied tax rate to this order, create a new object to hold the information.
      // If the report is detailled, we will also use this object to save to the database.
      $tax = new stdClass;
      
      // Report_id is a dummy field at this moment. In the future we want to be able to distinguish different reports.
      $tax->tax_rate = $rate['name'];
      $tax->order_id = $wrapper->order_id->value();
      $tax->currency_code = $wrapper->commerce_order_total->currency_code->value();
      $tax->taxable =& $base_price;
      $tax->taxed = (int) $component['price']['amount'];

      // Store the record to an array.
      $applied_taxes[] = $tax;
    }
    elseif ($component['name'] == 'base_price') {
      dpm($component);
      // Aggregate the base price for this order.
      $base_price += $component['price']['amount'];
    }
  }
  
  if ($insert) {
    $primary_keys = array();
  } else {
    $primary_keys = array('tax_rate', 'order_id', 'currency_code');
  }
  
  foreach ($applied_taxes as $tax) {
    $result = drupal_write_record('commerce_reports_tax', $tax, $primary_keys);
    dpm($tax);
    dpm($result);
  }
}

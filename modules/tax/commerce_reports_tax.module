<?php

/**
 * Implements hook_menu().
 */
function commerce_reports_tax_menu() {
  $items = array();

  $items['admin/commerce/config/taxes/reports'] = array(
    'title' => 'Tax reporting',
    'description' => 'Tax reporting.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_reports_tax_settings'),
    'access arguments' =>  array('configure store'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_views_api().
 */
function commerce_reports_tax_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Admin settings form
 */
function commerce_reports_tax_settings() {
  $form = array();

  $form['commerce_reports_tax_help'] = array(
    '#prefix' => '<p>',
    '#markup' => t('Due to the complexity of most taxation systems, the information needed to display a tax report must be built the first time you install this module.'),
    '#suffix' => '</p>',
  );
  
  $form['commerce_reports_tax_experimental'] = array(
    '#prefix' => '<p>',
    '#markup' => t('This module is still experimental and will possibly not work as expected. It could also be that certain features are dissabled.'),
    '#suffix' => '</p>',
  );

  $form['commerce_reports_tax_rebuild'] = array(
    '#type' => 'submit',
    '#value' => t('Rebuild tax database'),
    '#submit' => array('commerce_reports_tax_build'),
  );

  return $form;
}

/**
 * Build the table of tax information.
 *
 * TODO You should be able to generate multiple reports, and it should be able to store these next to each other.
 * TODO All of these reports should be able to be generated with different parameters, like period and entity_type.
 * TODO All this logic should be wrapped in the Batch API.
 */
function commerce_reports_tax_generate() {
  // Clear the database
  db_query('TRUNCATE {commerce_reports_tax}');

  // Key the rates
  $rates = array();
  foreach (commerce_tax_rates() as $rate) {
    $rates[$rate['price_component']] = $rate['name'];
  }

  // Load all completed orders in the system
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', 'commerce_order')
    ->propertyCondition('status', 'completed')
    ->execute();
    
  if ($result) {
    $orders = entity_load('commerce_order', array_keys($result['commerce_order']));

    // Iterate the orders and break each order down into its components
    $taxes = array();
    foreach ($orders as $order) {
      $wrapper = entity_metadata_wrapper('commerce_order', $order);
      $order_data = $wrapper->commerce_order_total->data->value();

      // Add the taxes
      foreach ($order_data['components'] as $component) {
        if (array_key_exists($component['name'], $rates)) {
          // Build the new record for the tax table.
          $row = new stdClass;
          $row->order_id = $wrapper->order_id->value();
          $row->tax = $rates[$component['name']];
          $row->amount = (int) $component['price']['amount'];
          
          // Write the record
          drupal_write_record('commerce_reports_tax', $row);
        }
      }
      
    }
    
    drupal_set_message(t('Finished rebuilding the tax report table.'));
  } else {
    drupal_set_message(t("There weren't any orders to report on."));
  }
}

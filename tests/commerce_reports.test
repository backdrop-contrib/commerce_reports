<?php
/**
 * @file
 * Unit tests for the commerce reports module.
 */
 
class CommerceReportsBaseTestCase extends CommerceBaseTestCase {
  
  protected $products;
  protected $customers;
  protected $orders;
  
  function setUp() {
    $this->resetAll();
    
    $modules = parent::setUpHelper('all', array('commerce_reports'));
    parent::setUp($modules);
    
    $this->products = array();
    $this->customers = array();
    $this->orders = array();
  }
  
  /**
   * Helper function creating multiple dummy products with a variable price.
   */
  protected function createProducts($amount = 1) {
    for ($i = 0; $i < $amount; $i ++) {
      $product = $this->createDummyProduct($this->randomName(), '', rand(1, 1000));
      $this->products[$product->product_id] = $product;
    }
  }
  
  /**
   * Helper function creating multiple dummy customers.
   */
  protected function createCustomers($amount = 1) {
    for ($i = 0; $i < $amount; $i ++) {
      $customer = $this->createStoreCustomer();
      $this->customers[$customer->uid] = $customer;
    }
  }
  
  /**
   * Helper function creating multiple dummy orders.
   * If no customers or products exist, then one of each get created.
   */
  protected function createOrders($amount = 1) {
    if (empty($this->products)) {
      $this->createProducts();
    }
    
    if (empty($this->customers)) {
      $this->createCustomers();
    }
    
    for ($i = 0; $i < $amount; $i ++) {
      $totalProducts = rand(1, count($this->products));
      $products = array();
      
      for ($x = 0; $x < $totalProducts; $x ++) {
        $product = $this->products[array_rand($this->products)];
        $products[$product->product_id] = rand(1, 10);
      }
      
      if (!($customer = next($this->customers))) {
        $customer = reset($this->customers);
      }
      
      $order = $this->createDummyOrder($customer->uid, $products, 'completed');
      
      $this->orders[] = array(
        'commerce_order' => $order,
        'products' => $products,
      );
    }
  }
  
}

class CommerceReportsCustomerTestCase extends CommerceReportsBaseTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Customer reports',
      'description' => 'Test the customer reports.',
      'group' => 'Drupal Commerce',
    );
  }
  
  /**
   * Tests creating a single order for a single customer, containing a single product with a variable quantity.
   * Then verifies if the reporting is correct.
   */
  function testSingleCustomer() {
    $this->createOrders();
    
    $this->_test();
  }
  
  /**
   * Make one customer perform multiple orders with multiple products.
   * Then verifies if the reporting is correct.
   */
  function testSingleCustomerMultipleProducts() {
    $this->createProducts(5);
    $this->createOrders();
    
    $this->_test();
  }
  
  /**
   * Make one customer perform multiple orders with multiple products.
   * Then verifies if the reporting is correct.
   */
  function testMultipleCustomers() {
    $this->createCustomers(3);
    $this->createProducts(2);
    $this->createOrders(10);
    
    $this->_test();
  }
  
  protected function _test() {
    $customers = array();
    
    foreach ($this->orders as $order) {
      $uid = $order['commerce_order']->uid;
      
      if (empty($customers[$uid])) {
        $customers[$uid] = array(
          'orders' => 0,
          'products' => 0,
          'revenue' => 0,
        );
      }
      
      $customers[$uid]['orders'] ++;
      
      foreach ($order['products'] as $product_id => $quantity) {
        $customers[$uid]['products'] += $quantity;
        $customers[$uid]['revenue'] += $quantity * $this->products[$product_id]->commerce_price['und'][0]['amount'];
      }
    }
    
    $report = views_get_view_result('commerce_reports_customers', 'default');
    
    $this->assertEqual(count($report), min(count($customers), 10), t('The amount of customers (%reported) that is reported (%generated) upon is correct.', array('%reported' => count($report), '%generated' => count($customers))));
    
    foreach ($report as $line) {
      $uid = $line->uid;
      
      $orders = $line->commerce_line_item_field_data_commerce_line_items_order_id;
      $products = $line->commerce_line_item_field_data_commerce_line_items_quantity;
      $revenue = $line->commerce_line_item_field_data_commerce_line_items__field_dat;
      $average = $line->commerce_line_item_field_data_commerce_line_items__field_dat_2;
      
      $this->assertFalse(empty($customers[$uid]), t('The customer %uid that is reported upon exists.', array('%uid' => $uid)));
      
      if (!empty($customers[$uid])) {
        $this->assertEqual($customers[$uid]['orders'], $orders, t('The reported amount of orders %reported matches the generated amount of orders %generated.', array('%reported' => $orders, '%generated' => $customers[$uid]['orders'])));
        $this->assertEqual($customers[$uid]['products'], $products, t('The reported amount of line items %reported matches the generated amount of line items %generated.', array('%reported' => $products, '%generated' => $customers[$uid]['products'])));
        $this->assertEqual($customers[$uid]['revenue'], $revenue, t('The reported revenue %reported matches the generated revenue %generated.', array('%reported' => $revenue, '%generated' => $customers[$uid]['revenue'])));
      }
    }
  }
  
}
 
class CommerceReportsProductTestCase extends CommerceReportsBaseTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Product reports',
      'description' => 'Test the product reports.',
      'group' => 'Drupal Commerce',
    );
  }
  
  /**
   * Tests creating a single order, containing a single product with a variable quantity.
   * Then verifies if the reporting is correct.
   */
  function testSingleProduct() {
    $this->createOrders();
    
    $this->_test();
  }
  
  /**
   * Tests creating a single order, containing multiple products with a variable quantity.
   * Then verifies if the reporting is correct.
   */
  function testMultipleProducts() {
    $this->createProducts(10);
    $this->createOrders();
    
    $this->_test();
  }
  
  /**
   * Tests creating a multiple orders, containing multiple products with a variable quantity.
   * Then verifies if the reporting is correct.
   */
  function testMultipleOrdersProducts() {
    $this->createProducts(5);
    $this->createOrders(5);
    
    $this->_test();
  }
  
  protected function _test() {
    $products = array();
    
    foreach ($this->orders as $order) {
      foreach ($order['products'] as $product_id => $quantity) {
        $sku = $this->products[$product_id]->sku;
        
        if (empty($products[$sku])) {
          $products[$sku] = array(
            'quantity' => 0,
            'revenue' => 0,
          );
        }
        
        $products[$sku]['quantity'] += $quantity;
        $products[$sku]['revenue'] += $quantity * $this->products[$product_id]->commerce_price['und'][0]['amount'];
      }
    }
    
    $report = views_get_view_result('commerce_reports_products', 'default');
    
    $this->assertEqual(count($report), min(count($products), 10), t('The amount of products (%reported) that is reported (%generated) upon is correct.', array('%reported' => count($report), '%generated' => count($products))));
    
    foreach ($report as $line) {
      $sku = $line->commerce_product_field_data_commerce_product_sku;
      $quantity = $line->commerce_line_item_quantity;
      $revenue = $line->field_data_commerce_total_commerce_total_amount;
      
      $this->assertFalse(empty($products[$sku]), t('The product %sku that is reported upon exists.', array('%sku' => $sku)));
      
      if (!empty($products[$sku])) {
        $this->assertEqual($products[$sku]['quantity'], $quantity, t('The reported quantity %reported matches the generated quantity %generated.', array('%sku' => $sku, '%reported' => $quantity, '%generated' => $products[$sku]['quantity'])));
        $this->assertEqual($products[$sku]['revenue'], $revenue, t('The reported revenue %reported matches the generated revenue %generated.', array('%sku' => $sku, '%reported' => $revenue, '%generated' => $products[$sku]['revenue'])));
      }
    }
  }
  
}
